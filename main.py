import argparse
from urllib.parse import urlparse
import requests
import socket
import sys
import time
import json
from bs4 import BeautifulSoup

def color_text(text, color):
    colors = {
        'hijau': '\033[1;92m',
        'putih': '\033[1;97m',
        'abu': '\033[1;90m',
        'kuning': '\033[1;93m',
        'ungu': '\033[1;95m',
        'merah': '\033[1;91m',
        'biru': '\033[1;96m',
        'reset': '\033[0m'
    }
    return f"{colors[color]}{text}{colors['reset']}"


def judul(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        title_tag = soup.find('title')

        if title_tag:
            return title_tag.text.strip()
        else:
            return "Title not found on the webpage."
    except requests.RequestException as e:
        return f"Error: {e}"
    except Exception as ex:
        return f"An error occurred: {ex}"



def lacak(ip):
    base_url = f"http://ipinfo.io/{ip}/json"

    try:
        response = requests.get(base_url)
        data = response.json()

        print("Informasi Geolokasi untuk IP", ip)
        print("Negara:", data.get("country", "N/A"))
        print("Kota:", data.get("city", "N/A"))
        print("Wilayah:", data.get("region", "N/A"))
        print("Lokasi:", data.get("loc", "N/A"))
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")


def dapatkan_ip(domain):
    try:
        ip = socket.gethostbyname(domain)
        print(f"Alamat IP untuk {domain}: {ip}")
        return ip
    except socket.error as e:
        print(f"Gagal mendapatkan alamat IP untuk {domain}. Error: {e}")
        return None


def get_domain(url):
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    return domain


def cari_ip(url):
    try:
        ip = socket.gethostbyname(url)
        return ip
    except socket.gaierror:
        return None

def cari_security_header(url):
    response = requests.get(url)
    security_headers = response.headers.get("X-XSS-Protection"), response.headers.get("Strict-Transport-Security"), response.headers.get("X-Content-Type-Options"), response.headers.get("X-Frame-Options")
    return security_headers

def cari_server_info(url):
    response = requests.get(url)
    server_info = response.headers.get("Server")
    return server_info


def ketik(s):
    for c in s + "\n":
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.050)

def loading():
    ketik(f"Loading......")
    time.sleep(5)
    ketik("-"*60)

def internet():
    try:
        response = requests.get("http://www.google.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def scan_url(api_key, url):
    url_params = {'apikey': api_key, 'resource': url}
    url_scan_url = 'https://www.virustotal.com/vtapi/v2/url/report'
    url_response = requests.get(url_scan_url, params=url_params)
    url_result = url_response.json()
    if url_result['response_code'] == 1:
        print(color_text(f"Hasil pemindaian untuk {url}:", 'hijau'))
        print(color_text("-"*55, 'putih'))
        print(color_text(f"Total pemindaian: {url_result['total']}", 'putih'))
        print(color_text("="*55, 'putih'))
        print(color_text(f"Positif: {url_result['positives']}", 'hijau'))
        print(color_text("-"*20, 'putih'))

        print(color_text("Hasil Antivirus:", 'putih'))
        for scan in url_result['scans'].items():
            result_text = color_text(f"{scan[1]['result']}", 'hijau') if 'malicious' in scan[1]['result'].lower() else scan[1]['result']
            print(f"{scan[0]}: {result_text}")
            time.sleep(0.050)
    else:
        print(color_text("Pemindaian belum selesai atau URL tidak ditemukan dalam database", 'merah'))
    

def scan_file(api_key, file_path):
    file_scan_url = 'https://www.virustotal.com/vtapi/v2/file/scan'
    file_report_url = 'https://www.virustotal.com/vtapi/v2/file/report'
    
    with open(file_path, 'rb') as file:
        file_params = {'apikey': api_key}
        file_response = requests.post(file_scan_url, files={'file': (file_path, file)}, params=file_params)
        file_result = file_response.json()

        if file_result['response_code'] == 1:
            resource = file_result['resource']
            print(f"Berkas {file_path} berhasil dikirimkan untuk pemindaian.")
            print(f"Menunggu hasil pemindaian...")
            
            
            while True:
                report_params = {'apikey': api_key, 'resource': resource}
                report_response = requests.get(file_report_url, params=report_params)
                report_result = report_response.json()
                
                if report_result['response_code'] == 1:
                    positives = report_result['positives']
                    total = report_result['total']
                    print(f"Total pemindaian: {total}")
                    print(f"Positif: {positives}")
                    
                    if positives > 0:
                        print("Hasil Antivirus:")
                        for scan in report_result['scans'].items():
                            print(f"{scan[0]}: {scan[1]['result']}")
                    break
                elif report_result['response_code'] == 0:
                    print("Pemindaian belum selesai. Menunggu...")
                    time.sleep(5)
                else:
                    print("Terjadi kesalahan saat memeriksa hasil pemindaian.")
                    break
        else:
            print("Gagal mengirimkan berkas untuk pemindaian.")
            
def simpan_hasil_ke_file(nama_file, hasil_pemindaian):
    with open(nama_file, 'w') as file:
        json.dump(hasil_pemindaian, file, indent=2)
        file.write("\n")
        print(f"Hasil pemindaian disimpan ke dalam file: {nama_file}")
    
def main():
    parser = argparse.ArgumentParser(description='Pemindai Dengan API')
    parser.add_argument('--url', help='URL yang akan dipindai')
    parser.add_argument('--file', help='Path berkas yang akan dipindai')
    parser.add_argument('--save', help='Simpan hasil pemindaian ke dalam file', default=None)
    args = parser.parse_args()

    api_key = 'API_KEY'  # Ganti dengan kunci API VirusTotal Anda

    if args.url:
        if not internet():
            print('Kamu tidak terhubung ke internet, sambungkan perangkat anda ke internet')
            sys.exit()
        else:
            loading()
            hasil_pemindaian = scan_url(api_key, args.url)
            domain = get_domain(args.url)
            ip = dapatkan_ip(domain)
            lacak(ip)
            if args.save:
                simpan_hasil_ke_file(args.save, hasil_pemindaian)

        
        ip_address = cari_ip(args.url)
        print(f"IP address untuk {args.url}: {ip_address}")

        security_headers = cari_security_header(args.url)
        print(f"Security headers untuk {args.url}: {security_headers}")

        server_info = cari_server_info(args.url)
        print(f"Informasi server untuk {args.url}: {server_info}")
        nama_web = judul(args.url)
        if nama_web == '':
          print("error gak punya judul")
        else:
            print(f'Nama Websitenya: {nama_web}')

    elif args.file:
        if not internet():
            print('Kamu tidak terhubung ke internet, sambungkan perangkat anda ke internet')
            sys.exit()
        else:
            loading()
            hasil_pemindaian = scan_file(api_key, args.file)
            if args.save:
                simpan_hasil_ke_file(args.save, hasil_pemindaian)
    else:
        print("Penggunaan: python main.py --url <url> ATAU python main.py --file <file>")

if __name__ == "__main__":
    main()
